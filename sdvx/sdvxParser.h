//
// Created by nyanm on 2022/4/21.
//

#ifndef SDVX_CPP_SDVXPARSER_H
#define SDVX_CPP_SDVXPARSER_H

#include "fstream"
#include "string"
#include "iostream"
#include "sstream"
#include "tinyxml.h"
#include <codecvt>
#include <locale>
#include "regex"
#include "io.h"
#include "SQLiteCpp/SQLiteCpp.h"
#include "../util/logger.h"

using namespace std;

const string db_name = "music.db";
const int metaVersion = 1;
const int fixVersion = 0;

struct levelData {
    int level = 0;
    string illustrator = "dummy";
    string effector = "dummy";
};

struct musicData {
    // info field
    int mID = 0;
    string name;
    string nameYmgn;  // ymgn = Ë™≠„Åø‰ªÆÂêç
    string artist;
    string artistYmgn;
    string mAscii;
    float bpmMax;
    float bpmMin;
    long date;
    int version;
    int infVer;
    // difficulty field
    levelData novice;
    levelData advanced;
    levelData exhaust;
    levelData infinite;
    levelData maximum;
};

struct akaData {
    int index;
    string akaname;
};

struct searchData {
    int mID;
    string meme;
};

class sdvxParser {

public:
    sdvxParser(const string &contents_dir);

    vector<musicData> musicMap;
    vector<akaData> akaMap;
    vector<searchData> searchMap;

    int mapSize = 0;

private:
    string ea3_path;
    string data_path;
    int64_t game_version = 0;

    SQLite::Database musicDB = SQLite::Database(db_name, SQLite::OPEN_READWRITE | SQLite::OPEN_CREATE);

    bool update_check();

    void generate_database();

    void parse_music_db(string &xml_path);

    void parse_aka_db(string &xml_path);

    void update();

    string exist_meta = R"(SELECT count(*) FROM sqlite_master WHERE type= "table" AND name = "METADATA";)";
    string drop_meta = R"(DROP TABLE IF EXISTS METADATA;)";
    string set_meta = R"(
    CREATE TABLE METADATA(

    METADATA_VER INT PRIMARY KEY NOT NULL ,
    SDVX_VER INT NOT NULL ,
    FIX_VER INT NOT NULL,

    MAP_SIZE INT NOT NULL);)";

    string query_meta = R"(SELECT * FROM METADATA;)";

    vector<string> fix_before = {
            // latin field
            "È©´", "È®´", "Êõ¶", "È†Ω", "ÁΩá", "Êõ©", "ÈΩ∑", "ÂΩú", "È™≠", "È¨•", "Èõã", "Èöç", "Ë∂Å", "È¨Ü", "È©©",
            // symbol field
            "Èæï", "Ëπá", "È¨ª", "Èªª", "Èë∑",
            // graph field
            "ÈΩ∂", "ÈΩ≤", "Ë∫î", "ÈáÅ", "ÈΩ™", "Èëà", "Èúª", "Áõ•",
    };
    vector<string> fix_after = {
            // latin field
            "ƒÅ", "√°", "√†", "√§", "√™", "√®", "√©", "≈´", "√º", "√É", "«õ", "√ú", "«¢", "√ù", "√ò",
            // symbol field
            "‚Ç¨", "‚ÇÇ", "‚ôÉ", "*", "„Çî",
            // graph field
            "‚ô°", "‚ù§", "‚òÖ", "üçÑ", "‚ô£", "‚ô¶", "‚ô†", "‚öô",
    };

    string fix_jis(const string &utf8_str);

    static string get_insert_meta(int64_t gameVer, int mapSize, int metaVer = metaVersion, int fixVer = fixVersion);

    static string jis_to_utf8(const char *jis_char);
};


#endif //SDVX_CPP_SDVXPARSER_H
